(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}(g.webit || (g.webit = {})).calendar = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/**
 * Atgriežam jaunu datuma objektu, kuram pielikts norādītais skaits dienu
 * @param object Datums
 * @param number Dienu skaits ko pielikts. Ja neg, tad atņemt
 */
function addDays(date, daysCount) {
    var d = new Date(date.getTime());

    d.setDate(d.getDate()+daysCount);

    return d;
}

module.exports = addDays;
},{}],2:[function(require,module,exports){
var monthStructure = require('./monthStructure');
var createDomElement = require('./createDomElement');

module.exports = {
    calendar: function(date) {
        return createDomElement(monthStructure(date));
    }
}
},{"./createDomElement":4,"./monthStructure":7}],3:[function(require,module,exports){
function createDomDayElement(date) {
    var d = document.createElement('div');
    d.appendChild(document.createTextNode(date.getDate()));

    return d;
}

module.exports = createDomDayElement;
},{}],4:[function(require,module,exports){
var createDomDayElement = require('./createDomDayElement');

function addCssClasses(el, s) {

    var c = ['calendar__date'];
    
    if (s.prevMonth) {
        c.push('calendar__date--prevmonth');
    }
    else if (s.nextMonth) {
        c.push('calendar__date--nextmonth');
    }
    else if (s.currMonth) {
        c.push('calendar__date--currentmonth');
    }

    el.className = c.join(' ');
}

function createDomElement(monthStructure) {
    var el = document.createElement('div'), dayEl, weekEl;
    el.className = 'calendar';

    for (var w = 0; w < monthStructure.length; w++) {

        weekEl = document.createElement('div');
        weekEl.className = 'calendar__week';

        for (var d = 0; d < monthStructure[w].length; d++) {

            dayEl = createDomDayElement(monthStructure[w][d].date);

            // Uzstādām dažādas css klases, kas raksturo datumu
            addCssClasses(dayEl, monthStructure[w][d])

            weekEl.appendChild(dayEl);
        }

        el.appendChild(weekEl);

    }

    return el;
}

module.exports = createDomElement;
},{"./createDomDayElement":3}],5:[function(require,module,exports){
/**
 * Nedēļas diena ir not zero based
 * Pirmdiena ir 1
 * Svētdiena ir 7
 */
function dayOfWeek(date) {
    if (typeof date == 'undefined') {
        date = new Date();
    }

    var r = date.getDay();
    // Svētdiena
    if (r == 0) {
        r = 7;
    }

    return r;
}

module.exports = dayOfWeek;
},{}],6:[function(require,module,exports){
function s(year, month) {
    return {
        year: year,
        month: month
    }
}
function sd(date) {
    return s(date.getFullYear(), date.getMonth());
}

/**
 * Atrodam mazāko gadu un mēnesi
 * Atrodam lielāko gadu un mēnesi
 */
function findExtremes(dates) {
    // Katrai dienai jāsaliek pre month, current month vai next month pazīmes
    var low = s(999999, 999999);
    var high = s(-1, -1);


    for (var i = 0; i < dates.length; i++) {
        if (isLower(dates[i], low)) {
            low = sd(dates[i]);
        }
        
        if (isHigher(dates[i], high)) {
            high = sd(dates[i]);
        }
    }

    return {
        low: low,
        high: high
    }
}

function isLower(date, extreme)  {
    if (date.getFullYear() < extreme.year) {
        return true;
    }
    else if (date.getFullYear() == extreme.year) {
        if (date.getMonth() < extreme.month) {
            return true;
        }
    }

    return false;
}

function isHigher(date, extreme) {
    if (date.getFullYear() > extreme.year) {
        return true;
    }
    else if (date.getFullYear() == extreme.year) {
        if (date.getMonth() > extreme.month) {
            return true;
        }
    }

    return false;
}

function isEqual(date, extreme) {
    if (date.getFullYear() == extreme.year && date.getMonth() == extreme.month) {
        return true;
    }
    return false;
}

module.exports = {
    find: findExtremes,
    isLower: isLower,
    isHigher: isHigher,
    isEqual: isEqual
};
},{}],7:[function(require,module,exports){
var weekStructure = require('./weekStructure');

function monthStructure(date) {
    if (typeof date == 'undefined') {
        date = new Date();
    }

    var s = [];
    var start = 1;
    
    // Veidojam struktūru ar 6 nedēļām
    for (var i = 0; i < 6; i++) {
        
        date.setDate(start)

        s.push(weekStructure(date))

        start += 7;
    }

    return s;
}

module.exports = monthStructure;
},{"./weekStructure":8}],8:[function(require,module,exports){
var addDays = require('./addDays');
var dayOfWeek = require('./dayOfWeek')
var monthExtremes = require('./monthExtremes')

function weekStructure(date) {
    if (date == 'undefined') {
        date = new Date();
    }

    var d, s = [], start = -dayOfWeek(date), isPrev, isNext, isCurrent;

    // Savācam masīvu ar dienu datumiem
    for (var i = 0; i <= 6; i++) {
        s.push(addDays(date, ++start));
    }

    var extremes = monthExtremes.find(s);
    
    for (var i = 0; i < s.length; i++) {
        
        isPrev = monthExtremes.isEqual(s[i], extremes.low);
        isNext = monthExtremes.isEqual(s[i], extremes.high);
        isCurrent = false;
        
        // Ja vienlaicīgi gan prev, gan next, tad tas ir current month
        if (isPrev && isNext) {
            isCurrent = true;

            isPrev = false;
            isNext = false;
        }
        
        s[i] = {
            prevMonth: isPrev,
            nextMonth: isNext,
            currMonth: isCurrent,
            date: s[i]
        }
    }

    return s;
}

module.exports = weekStructure;
},{"./addDays":1,"./dayOfWeek":5,"./monthExtremes":6}]},{},[2])(2)
});
(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}(g.webit || (g.webit = {})).calendar = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/**
 * Atgriežam jaunu datuma objektu, kuram pielikts norādītais skaits dienu
 * @param object Datums
 * @param number Dienu skaits ko pielikts. Ja neg, tad atņemt
 */
function addDays(date, daysCount) {
    var d = new Date(date.getTime());

    d.setDate(d.getDate()+daysCount);

    return d;
}

module.exports = addDays;
},{}],2:[function(require,module,exports){
var monthStructure = require('./monthStructure');
var calendarDomElement = require('./calendarDomElement');
var domEvents = require('./domEvents');

module.exports = {
    calendar: function(date) {
        var el = calendarDomElement(monthStructure(date), date)

        var eventsTarget = el;//document.getElementsByTagName('body')[0];

        domEvents.addEvent(eventsTarget, 'click', function(ev){
            console.log(domEvents.eventTarget(ev));
        })

        return el;
    }
}
},{"./calendarDomElement":3,"./domEvents":7,"./monthStructure":12}],3:[function(require,module,exports){
var dateSwitchDomElement = require('./dateSwitchDomElement');
var monthDomElement = require('./monthDomElement');

function calendarDomElement(monthStructure, currentDate) {
    var el = document.createElement('div');

    el.className = 'calendar';

    el.appendChild(
        dateSwitchDomElement(currentDate)
    );

    el.appendChild(
        monthDomElement(monthStructure, currentDate)
    );

    return el;
}

module.exports = calendarDomElement;
},{"./dateSwitchDomElement":4,"./monthDomElement":11}],4:[function(require,module,exports){
function navPrev() {
    var el = document.createElement('a');
    el.className = 'calendar__nav calendar__nav--prev';

    el.appendChild(
        document.createTextNode('<')
    );

    return el;
}

function navNext() {
    var el = document.createElement('a');
    el.className = 'calendar__nav calendar__nav--next';

    el.appendChild(
        document.createTextNode('>')
    );

    return el;
}

function dateCaption(date) {
    var el = document.createElement('a');
    el.className = 'calendar__datecaption';

    el.appendChild(
        document.createTextNode(date.getFullYear()+'-'+(date.getMonth()+1)+'-'+date.getDate())
    );

    return el;
}

function dateSwitchDomElement(currentDate) {
    var el = document.createElement('div');

    el.className = 'calendar__switch';

    el.appendChild(navPrev());
    el.appendChild(dateCaption(currentDate));
    el.appendChild(navNext());

    return el;
}

module.exports = dateSwitchDomElement;
},{}],5:[function(require,module,exports){
function createDomDayElement(date) {
    var d = document.createElement('div');
    d.appendChild(document.createTextNode(date.getDate()));

    return d;
}

module.exports = createDomDayElement;
},{}],6:[function(require,module,exports){
/**
 * Nedēļas diena ir not zero based
 * Pirmdiena ir 1
 * Svētdiena ir 7
 */
function dayOfWeek(date) {
    if (typeof date == 'undefined') {
        date = new Date();
    }

    var r = date.getDay();
    // Svētdiena
    if (r == 0) {
        r = 7;
    }

    return r;
}

module.exports = dayOfWeek;
},{}],7:[function(require,module,exports){
function addEvent(obj, type, fn, params) {
    params = (typeof params == 'undefined' ? false : params);
    if ( obj.attachEvent ) {
        obj['e'+type+fn] = fn;
        obj[type+fn] = function(){obj['e'+type+fn](window.event)}
        obj.attachEvent('on'+type, obj[type+fn]);
    }
    else {
        obj.addEventListener(type, fn, params);
    }
}

function removeEvent(obj, type, fn, params) {
    params = (typeof params == 'undefined' ? false : params);
    if ( obj.detachEvent ) {
        obj.detachEvent( 'on'+type, obj[type+fn] );
        obj[type+fn] = null;
    }
    else {
        obj.removeEventListener(type, fn, params);
    }
}

function preventEvent(ev) {
    if (ev.preventDefault) {
        ev.preventDefault();
    }
    else {
        ev.returnValue = false;
    }
}

/**
 * Normalize event.target
 */
function eventTarget(ev) {
    var el;

    if (ev.target) {
        el = ev.target;
    }
    else if (ev.srcElement) {
        el = ev.srcElement
    }
    
    // Safari bug. Selected text returns text
    if (el.nodeType == 3) {
        el = el.parentNode
    }

    return el;
}

module.exports = {
    addEvent: addEvent,
    removeEvent: removeEvent,
    preventEvent: preventEvent,
    eventTarget: eventTarget
}
},{}],8:[function(require,module,exports){
function isHigherMonthThan(date1, date2) {
    if (date1.getFullYear() > date2.getFullYear()) {
        return true;
    }
    else if (date1.getFullYear() == date2.getFullYear()) {
        if (date1.getMonth() > date2.getMonth()) {
            return true;
        }
    }
    return false;
}

module.exports = isHigherMonthThan;
},{}],9:[function(require,module,exports){
function isLowerMonthThan(date1, date2) {
    if (date1.getFullYear() < date2.getFullYear()) {
        return true;
    }
    else if (date1.getFullYear() == date2.getFullYear()) {
        if (date1.getMonth() < date2.getMonth()) {
            return true;
        }
    }
    return false;
}

module.exports = isLowerMonthThan;
},{}],10:[function(require,module,exports){
function isSameMonth(date1, date2) {
    if (date1.getFullYear() == date2.getFullYear() && date1.getMonth() == date2.getMonth()) {
        return true;
    }
    return false;
}

module.exports = isSameMonth;
},{}],11:[function(require,module,exports){
var dayDomElement = require('./dayDomElement');
var isSameMonth = require('./isSameMonth');
var isLowerMonthThan = require('./isLowerMonthThan');
var isHigherMonthThan = require('./isHigherMonthThan');

function addCssClasses(el, date, currentDate) {

    var c = ['calendar__date'];

    if (isSameMonth(date, currentDate)) {
        c.push('calendar__date--currentmonth');
    }
    else if (isLowerMonthThan(date, currentDate)) {
        c.push('calendar__date--prevmonth');
    }
    else if (isHigherMonthThan(date, currentDate)) {
        c.push('calendar__date--nextmonth');
    }

    el.className = c.join(' ');
}

function createDomElement(monthStructure, currentDate) {
    var el = document.createElement('div'), dayEl, weekEl;
    el.className = 'calendar__month';

    for (var w = 0; w < monthStructure.length; w++) {

        weekEl = document.createElement('div');
        weekEl.className = 'calendar__week';

        for (var d = 0; d < monthStructure[w].length; d++) {

            dayEl = dayDomElement(monthStructure[w][d]);

            // Uzstādām dažādas css klases, kas raksturo datumu
            addCssClasses(dayEl, monthStructure[w][d], currentDate)

            weekEl.appendChild(dayEl);
        }

        el.appendChild(weekEl);

    }

    return el;
}

module.exports = createDomElement;
},{"./dayDomElement":5,"./isHigherMonthThan":8,"./isLowerMonthThan":9,"./isSameMonth":10}],12:[function(require,module,exports){
var weekStructure = require('./weekStructure');

function monthStructure(date) {
    if (typeof date == 'undefined') {
        date = new Date();
    }

    var s = [], start = 1, d = new Date(date.getTime());

    // Veidojam struktūru ar 6 nedēļām
    for (var i = 0; i < 6; i++) {
        
        d.setDate(start)

        s.push(weekStructure(d))

        start += 7;
    }

    return s;
}

module.exports = monthStructure;
},{"./weekStructure":13}],13:[function(require,module,exports){
var addDays = require('./addDays');
var dayOfWeek = require('./dayOfWeek')

function weekStructure(date) {
    if (date == 'undefined') {
        date = new Date();
    }

    var s = [], start = -dayOfWeek(date);

    // Savācam masīvu ar dienu datumiem
    for (var i = 0; i <= 6; i++) {
        s.push(addDays(date, ++start));
    }

    return s;
}

module.exports = weekStructure;
},{"./addDays":1,"./dayOfWeek":6}]},{},[2])(2)
});
(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}(g.webit || (g.webit = {})).calendar = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var cloneDate = require('./cloneDate');

/**
 * Atgriežam jaunu datuma objektu, kuram pielikts norādītais skaits dienu
 * @param object Datums
 * @param number Dienu skaits ko pielikts. Ja neg, tad atņemt
 */
function addDays(date, daysCount) {
    var d = cloneDate(date);

    d.setDate(d.getDate()+daysCount);

    return d;
}

module.exports = addDays;
},{"./cloneDate":4}],2:[function(require,module,exports){
var cloneDate = require('./cloneDate');
var daysInMonth = require('./daysInMonth');

function addMonths(date, monthsCount) {
    var d = cloneDate(date);

    // Nolasām current date
    var n = d.getDate();

    // Uzliekam mēneša pirmo dienu. Lai nebūtu problēmu ar februāra mēnesi
    d.setDate(1);
    d.setMonth(d.getMonth() + monthsCount);

    // Mēģinām uzstādīt atpakaļ iepriekšējo datumu
    // Ja iepriekšējais datums ir lielāks nekā esošajā mēnesī,
    // tad uzstādām pēdējo iespējamo lielāko
    d.setDate(Math.min(n, daysInMonth(d.getFullYear(), d.getMonth()+1)));
    
    return d;
}

module.exports = addMonths;
},{"./cloneDate":4,"./daysInMonth":6}],3:[function(require,module,exports){
var domRender = require('./dom/render');

module.exports = {
    dom: function(date) {
        return new domRender(date)
    }
}
},{"./dom/render":10}],4:[function(require,module,exports){
function cloneDate(date) {
    return new Date(date.getTime());
}

module.exports = cloneDate
},{}],5:[function(require,module,exports){
/**
 * Nedēļas diena ir not zero based
 * Pirmdiena ir 1
 * Svētdiena ir 7
 */
function dayOfWeek(date) {
    if (typeof date == 'undefined') {
        date = new Date();
    }

    var r = date.getDay();
    // Svētdiena
    if (r == 0) {
        r = 7;
    }

    return r;
}

module.exports = dayOfWeek;
},{}],6:[function(require,module,exports){
function daysInMonth(year, month) {
    return new Date(year, month, 0).getDate();
}

module.exports = daysInMonth;
},{}],7:[function(require,module,exports){
function navPrev() {
    var el = document.createElement('a');
    el.className = 'calendar__nav calendar__nav--prev';

    el.appendChild(
        document.createTextNode('<')
    );

    return el;
}

function navNext() {
    var el = document.createElement('a');
    el.className = 'calendar__nav calendar__nav--next';

    el.appendChild(
        document.createTextNode('>')
    );

    return el;
}

function dateCaption(date, captionTextNode) {
    var el = document.createElement('a');
    el.className = 'calendar__datecaption';

    el.appendChild(captionTextNode);

    return el;
}

function dateCaptionTextNode(date) {
    return document.createTextNode(formatDate(date))
}

function formatDate(date) {
    return date.getFullYear()+'-'+(date.getMonth()+1)+'-'+date.getDate()
}

function dateSwitchDomElement(currentDate) {
    
    this.el = document.createElement('div');
    
    this.navPrev = navPrev();
    this.navNext = navNext();
    this.dateCaptionTextNode = dateCaptionTextNode(currentDate)
    this.dateCaption = dateCaption(currentDate, this.dateCaptionTextNode);
    
    this.el.className = 'calendar__switch';

    this.el.appendChild(this.navPrev);
    this.el.appendChild(this.dateCaption);
    this.el.appendChild(this.navNext);
}

dateSwitchDomElement.prototype = {
    getEl: function() {
        return this.el;
    },
    
    getNavPrev: function() {
        return this.navPrev;
    },
    getNavNext: function() {
        return this.navNext;
    },
    getDateCaption: function() {
        return this.dateCaption
    },

    isNavPrev: function(el) {
        return this.navPrev == el;
    },
    isNavNext: function(el) {
        return this.navNext == el;
    },
    isDateCaption: function(el) {
        return this.dateCaption == el;
    },

    setDate: function(date) {
        this.dateCaptionTextNode.nodeValue = formatDate(date)
    }
}

module.exports = dateSwitchDomElement;
},{}],8:[function(require,module,exports){
function addCssClasses(el, date) {

    var c = ['calendar__date'];

    if (date.dateProps.currMonth) {
        c.push('calendar__date--currentmonth');
    }
    else if (date.dateProps.prevMonth) {
        c.push('calendar__date--prevmonth');
    }
    else if (date.dateProps.nextMonth) {
        c.push('calendar__date--nextmonth');
    }

    if (date.dateProps.currDate) {
        c.push('calendar__date--currdate');
    }

    el.className = c.join(' ');

    return el;
}


function createDomDayElement(date) {
    this.el = addCssClasses(document.createElement('div'), date);
    
    this.dateTextNode = document.createTextNode(date.date.getDate());

    this.el.appendChild(this.dateTextNode);
}

createDomDayElement.prototype = {
    getEl: function() {
        return this.el;
    },
    setDate: function(date) {
         addCssClasses(this.el, date);

        this.dateTextNode.nodeValue = date.date.getDate()
    }
}

module.exports = createDomDayElement;
},{}],9:[function(require,module,exports){
var getMonthStructure = require('../monthStructure');
var setMonthStructureDatesProps = require('../setMonthStructureDatesProps');

var dayEl = require('./dayEl');

function monthEl(date) {

    var monthStructure = setMonthStructureDatesProps(getMonthStructure(date), date)

    this.el = document.createElement('div');
    this.el.className = 'calendar__month';

    this.days = [];

    var weekEl;
    for (var w = 0; w < monthStructure.length; w++) {

        weekEl = document.createElement('div');
        weekEl.className = 'calendar__week';

        for (var d = 0; d < monthStructure[w].length; d++) {

            if (typeof this.days[w] == 'undefined') {
                this.days[w] = [];
            }

            this.days[w][d] = {
                data: monthStructure[w][d],
                el: new dayEl(monthStructure[w][d])
            }

            // Uzstādām dažādas css klases, kas raksturo datumu
            weekEl.appendChild(this.days[w][d].el.getEl());
        }

        this.el.appendChild(weekEl);
    }
}

monthEl.prototype = {
    getEl: function() {
        return this.el;
    },
    getDays: function() {
        return this.days
    },
    findDayByEl: function(el) {
        for (var i = 0; i < this.days.length; i++) {
            for (var j = 0; j < this.days[i].length; j++) {
                if (el == this.days[i][j].el.getEl()) {
                    return this.days[i][j].data;
                }    
            }
        }

        return false;
    },
    setDate: function(date) {
        var monthStructure = setMonthStructureDatesProps(getMonthStructure(date), date)

        for (var w = 0; w < monthStructure.length; w++) {
            for (var d = 0; d < monthStructure[w].length; d++) {
                this.days[w][d].data = monthStructure[w][d];
                this.days[w][d].el.setDate(monthStructure[w][d])
            }
        }
    }
}

module.exports = monthEl;
},{"../monthStructure":17,"../setMonthStructureDatesProps":18,"./dayEl":8}],10:[function(require,module,exports){
var domEvents = require('../domEvents');
var addMonths = require('../addMonths');
var cloneDate = require('../cloneDate');

var dateSwitchEl = require('./dateSwitchEl');
var monthEl = require('./monthEl');


function render(currentDate) {
    this.events = this.prepareEvents([
        'dateclick', 'prevclick', 'nextclick', 'datecaptionclick'
    ]);

    this.date = cloneDate(currentDate);

    this.el = document.createElement('div');

    this.el.className = 'calendar';

    this.dateSwitch = new dateSwitchEl(currentDate);
    this.month = new monthEl(currentDate);

    this.el.appendChild(this.dateSwitch.getEl());
    this.el.appendChild(this.month.el);

    this.setEvents('add');
}

render.prototype = {
    setEvents: function(mode) {

        var mthis = this;
        function click(ev) {

            var t = domEvents.eventTarget(ev);
            
            var day = mthis.month.findDayByEl(t);
            if (day) {

                mthis.setDate(day.date);

                mthis.fire('dateclick', [day.date]);
            }
            else if (mthis.dateSwitch.isNavPrev(t)) {

                mthis.setDate(addMonths(mthis.date, -1));

                mthis.fire('prevclick', []);
            }
            else if (mthis.dateSwitch.isNavNext(t)) {

                mthis.setDate(addMonths(mthis.date, 1));

                mthis.fire('nextclick', []);
            }
            else if (mthis.dateSwitch.isDateCaption(t)) {
                mthis.fire('datecaptionclick', []);
            }
        }

        /**
         * @todo Pārtaisīt uz external funkciju, pretējā gadījumā nevar novākt listener
         */
        if (mode == 'add') {
            domEvents.addEvent(this.el, 'click', click)
        }
        else {
            domEvents.removeEvent(this.el, 'click', click);
        }
    },

    prepareEvents: function(eventNames) {
        var r = {};
        for ( var i in eventNames ) {
            r[eventNames[i]] = [];
        }
        return r;
    },

    on: function(eventName, cb) {
        if (typeof this.events[eventName] != 'undefined') {
            this.events[eventName].push(cb);
        }

        return this;
    },

    /**
     * Fire events attached callbacks
     */
    fire: function(eventName, args) {
        console.log('fire', eventName, args)
        for (var i in this.events[eventName]) {
            this.events[eventName][i].apply(this, args);
        }
    },

    getEl: function() {
        return this.el;
    },

    /**
     * Uzstādām jaunu datumu
     */
    setDate: function(date) {
        this.date = cloneDate(date);
        this.dateSwitch.setDate(date)
        this.month.setDate(date)
    },

    destroy: function() {
        this.setEvents('remove');

        if (this.el) {
            this.el.parentNode.removeChild(this.el);
            delete this.el;
        }
    }
}

module.exports = render;
},{"../addMonths":2,"../cloneDate":4,"../domEvents":11,"./dateSwitchEl":7,"./monthEl":9}],11:[function(require,module,exports){
function addEvent(obj, type, fn, params) {
    params = (typeof params == 'undefined' ? false : params);
    if ( obj.attachEvent ) {
        obj['e'+type+fn] = fn;
        obj[type+fn] = function(){obj['e'+type+fn](window.event)}
        obj.attachEvent('on'+type, obj[type+fn]);
    }
    else {
        obj.addEventListener(type, fn, params);
    }
}

function removeEvent(obj, type, fn, params) {
    console.log('removeevent');
    params = (typeof params == 'undefined' ? false : params);
    if ( obj.detachEvent ) {
        obj.detachEvent( 'on'+type, obj[type+fn] );
        obj[type+fn] = null;
    }
    else {
        console.log(obj.removeEventListener(type, fn, params));
    }
}

function preventEvent(ev) {
    if (ev.preventDefault) {
        ev.preventDefault();
    }
    else {
        ev.returnValue = false;
    }
}

/**
 * Normalize event.target
 */
function eventTarget(ev) {
    var el;

    if (ev.target) {
        el = ev.target;
    }
    else if (ev.srcElement) {
        el = ev.srcElement
    }
    
    // Safari bug. Selected text returns text
    if (el.nodeType == 3) {
        el = el.parentNode
    }

    return el;
}

module.exports = {
    addEvent: addEvent,
    removeEvent: removeEvent,
    preventEvent: preventEvent,
    eventTarget: eventTarget
}
},{}],12:[function(require,module,exports){
var isSameMonth = require('./isSameMonth');
var isSameDate = require('./isSameDate');
var isLowerMonthThan = require('./isLowerMonthThan');
var isHigherMonthThan = require('./isHigherMonthThan');

function getDateProps(date, currentDate) {
    return {
        currMonth: isSameMonth(date, currentDate),
        currDate: isSameDate(date, currentDate),
        prevMonth: isLowerMonthThan(date, currentDate),
        nextMonth: isHigherMonthThan(date, currentDate),
    }
}

module.exports = getDateProps;
},{"./isHigherMonthThan":13,"./isLowerMonthThan":14,"./isSameDate":15,"./isSameMonth":16}],13:[function(require,module,exports){
function isHigherMonthThan(date1, date2) {
    if (date1.getFullYear() > date2.getFullYear()) {
        return true;
    }
    else if (date1.getFullYear() == date2.getFullYear()) {
        if (date1.getMonth() > date2.getMonth()) {
            return true;
        }
    }
    return false;
}

module.exports = isHigherMonthThan;
},{}],14:[function(require,module,exports){
function isLowerMonthThan(date1, date2) {
    if (date1.getFullYear() < date2.getFullYear()) {
        return true;
    }
    else if (date1.getFullYear() == date2.getFullYear()) {
        if (date1.getMonth() < date2.getMonth()) {
            return true;
        }
    }
    return false;
}

module.exports = isLowerMonthThan;
},{}],15:[function(require,module,exports){
function isSameDate(date1, date2) {
    if (date1.getFullYear() == date2.getFullYear() && date1.getMonth() == date2.getMonth() && date1.getDate() == date2.getDate()) {
        return true;
    }
    return false;
}

module.exports = isSameDate;
},{}],16:[function(require,module,exports){
function isSameMonth(date1, date2) {
    if (date1.getFullYear() == date2.getFullYear() && date1.getMonth() == date2.getMonth()) {
        return true;
    }
    return false;
}

module.exports = isSameMonth;
},{}],17:[function(require,module,exports){
var weekStructure = require('./weekStructure');
var addDays = require('./addDays');

function monthStructure(date) {
    if (typeof date == 'undefined') {
        date = new Date();
    }

    var s = [], d = new Date(date.getTime());

    // Uzlieka mēneša sākumu
    d.setDate(1)

    // Veidojam struktūru ar 6 nedēļām
    for (var i = 0; i < 6; i++) {
        
        s.push(weekStructure(d))

        d = addDays(d, 7);
    }

    return s;
}

module.exports = monthStructure;
},{"./addDays":1,"./weekStructure":19}],18:[function(require,module,exports){
var getDateProps = require('./getDateProps');

function setMonthStructureDatesProps(structure, currentDate) {
    for (var w = 0; w < structure.length; w++) {
        for (var d = 0; d < structure[w].length; d++) {
            structure[w][d] = {
                date: structure[w][d],
                dateProps: getDateProps(structure[w][d], currentDate)
            }
        }
    }

    return structure;
}

module.exports = setMonthStructureDatesProps;
},{"./getDateProps":12}],19:[function(require,module,exports){
var addDays = require('./addDays');
var dayOfWeek = require('./dayOfWeek')

function weekStructure(date) {
    if (date == 'undefined') {
        date = new Date();
    }

    var s = [], start = -dayOfWeek(date);

    // Savācam masīvu ar dienu datumiem
    for (var i = 0; i <= 6; i++) {
        s.push(addDays(date, ++start));
    }

    return s;
}

module.exports = weekStructure;
},{"./addDays":1,"./dayOfWeek":5}]},{},[3])(3)
});